import { expect, it } from 'vitest'
import { textXml2Json } from '../src/lib/xml_json/xml2Json';
import {xml_bndes, xml_dsg, xml_pmg2_ferroviario} from './data/xmlGetRecordById';
import {RecordISO19115 } from '../src/lib/ogc/csw/metadata/RecordIso19115';
let xmlJsonObject = textXml2Json(xml_bndes)
let bndesRecord =  new RecordISO19115(xmlJsonObject)

it('Check CSW GetRecordByID BNDES - MDMetadata', () => {
    expect(bndesRecord.cswGetRecordByIdResponse()).toBeDefined()
    expect(bndesRecord.getMDMetadata()).toBeDefined()
    expect(bndesRecord.getMDMetadata().getCharacterSet()).toBeDefined()
    expect(bndesRecord.getMDMetadata().getCharacterSetCode()).toBe('utf8')
    expect(bndesRecord.getMDMetadata().getFileIdentifier()).toBeDefined()
    expect(bndesRecord.getMDMetadata().getFileIdentifier()).toBe('ca310739-6d45-4a00-bca0-2d7a424763b4')
    expect(bndesRecord.getMDMetadata().getDateStamp()).toBe('2013-10-24T15:25:31')
    expect(bndesRecord.getMDMetadata().getLanguage()).toBeDefined()
    expect(bndesRecord.getMDMetadata().getLanguage()).toBe('por')
    expect(bndesRecord.getMDMetadata().getMetadataStandardName()).toBeDefined()
    expect(bndesRecord.getMDMetadata().getMetadataStandardName()).toBe('ISO 19115:2003/19139')
    expect(bndesRecord.getMDMetadata().getMetadataStandardVersion()).toBeDefined()
    expect(bndesRecord.getMDMetadata().getMetadataStandardVersion()).toBe('1.0')
})
it('Check CSW GetRecordByID BNDES - MDMetadata/MD_Identification-', () => {
    let mdMetadata = bndesRecord.getMDMetadata()
    let identificationInfo = mdMetadata.getIdentificationInfo()[0]
    expect(identificationInfo).toBeDefined()
    expect(identificationInfo.getAbstract()).toBeDefined()
    expect(identificationInfo.getAbstract()).contains('Aprovações do Sistema BNDES para grande setor')
    expect(identificationInfo.getCharacterSets()).toBeDefined()
    expect(identificationInfo.getCharacterSets()[0]).toBe('utf8')
    expect(identificationInfo.getPurpose()).toBeUndefined()
    expect(identificationInfo.getStatus()).toBe('completed')
    expect(identificationInfo.getDescriptiveKeywords()[0].getType()).toBe('theme')
    expect(identificationInfo.getDescriptiveKeywords()[0].getKeywords()).contains('BNDES')
    expect(identificationInfo.getDescriptiveKeywords()[0].getThesaurusName()).toBeUndefined()
    //console.log(identificationInfo.getDescriptiveKeywords())
    //Aprovação Sistema BNDES Setor CNAE Agricultura e Pesca 2009
    expect(identificationInfo.getCitation()).toBeDefined()
    expect(identificationInfo.getCitation().getTitle()).toBe('Aprovação Sistema BNDES Setor CNAE Agricultura e Pesca 2009')
    expect(identificationInfo.getCitation().getISBN()).toBeUndefined()
    expect(identificationInfo.getCitation().getISSN()).toBeUndefined()
    expect(identificationInfo.getCitation().getCitedResponsibleParties()).toBeUndefined()

})


let dsgXmlJsonObject = textXml2Json(xml_dsg)
let dsgRecord =  new RecordISO19115(dsgXmlJsonObject)
it('Check CSW GetRecordByID DSG - MDMetadata', () => {
    expect(dsgRecord.cswGetRecordByIdResponse()).toBeUndefined()
    expect(dsgRecord.getMDMetadata()).toBeDefined()
    expect(dsgRecord.getMDMetadata().getCharacterSet()).toBeUndefined()
    expect(dsgRecord.getMDMetadata().getCharacterSetCode()).toBeUndefined()
    expect(dsgRecord.getMDMetadata().getFileIdentifier()).toBeDefined()
    expect(dsgRecord.getMDMetadata().getFileIdentifier()).toBe('ram_colorimetria_50')    
    expect(dsgRecord.getMDMetadata().getDateStamp()).toBeUndefined()
    expect(dsgRecord.getMDMetadata().getLanguage()).toBeDefined()
    expect(dsgRecord.getMDMetadata().getLanguage()).toBe('en-US')
    expect(dsgRecord.getMDMetadata().getMetadataStandardName()).toBeDefined()
    expect(dsgRecord.getMDMetadata().getMetadataStandardName()).toBe('ISO 19115:2003 - Geographic information - Metadata')
    expect(dsgRecord.getMDMetadata().getMetadataStandardVersion()).toBeDefined()
    expect(dsgRecord.getMDMetadata().getMetadataStandardVersion()).toBe('ISO 19115:2003')
})

it('Check CSW GetRecordByID DSG - MDMetadata/MD_Identification-', () => {
    let mdMetadata = dsgRecord.getMDMetadata()
    let identificationInfo = mdMetadata.getIdentificationInfo()[0]
    expect(identificationInfo).toBeDefined()
    expect(identificationInfo.getAbstract()).toBeUndefined()
    expect(identificationInfo.getCharacterSets()).toBeUndefined()    
    expect(identificationInfo.getPurpose()).toBeUndefined()
    expect(identificationInfo.getStatus()).toBeUndefined()
    expect(identificationInfo.getDescriptiveKeywords()).toHaveLength(0)
    expect(identificationInfo.getCitation()).toBeDefined()
    expect(identificationInfo.getCitation().getTitle()).toBeUndefined()
})

let fPmg2XmlJsonObject = textXml2Json(xml_pmg2_ferroviario)
let fPmg2Record =  new RecordISO19115(fPmg2XmlJsonObject)
it('Check CSW GetRecordByID PMG2-Ferrovia - MDMetadata', () => {
    let mdMetadata = fPmg2Record.getMDMetadata()
    
    expect(fPmg2Record.cswGetRecordByIdResponse()).toBeDefined()
    expect(mdMetadata).toBeDefined()
    expect(mdMetadata.getCharacterSet()).toBeDefined()
    expect(mdMetadata.getCharacterSetCode()).toBe('utf8')
    expect(mdMetadata.getFileIdentifier()).toBeDefined()
    expect(mdMetadata.getFileIdentifier()).toBe('caabc2ef-78c7-47e6-8f3a-06fb339fd1ce')
    expect(mdMetadata.getDateStamp()).toBe('2022-08-11T19:16:38')
    expect(mdMetadata.getLanguage()).toBeDefined()
    expect(mdMetadata.getLanguage()).toBe('por')
    expect(mdMetadata.getMetadataStandardName()).toBeDefined()
    expect(mdMetadata.getMetadataStandardName()).toBe('ISO 19115-3:2014')
    expect(mdMetadata.getMetadataStandardVersion()).toBeDefined()
    expect(mdMetadata.getMetadataStandardVersion()).toBe('Primeira edição')
    
})
it('Check CSW GetRecordByID  - PMG2-Ferrovia MDMetadata/MD_Identification-', () => {
    let mdMetadata = fPmg2Record.getMDMetadata()
    let identificationInfo = mdMetadata.getIdentificationInfo()[0]
    expect(identificationInfo).toBeDefined()
    expect(identificationInfo.getAbstract()).toBeDefined()
    expect(identificationInfo.getAbstract()).contains('Resumo descritivo do recurso')
    expect(identificationInfo.getCharacterSets()).toBeDefined()    
    expect(identificationInfo.getCharacterSets()[0]).toBe('utf8')
    expect(identificationInfo.getPurpose()).toBe('Cadastramento de metadados')
    expect(identificationInfo.getStatus()).toBe('completed obsolete')
    expect(identificationInfo.getDescriptiveKeywords()[1].getType()).toBe('theme')
    expect(identificationInfo.getDescriptiveKeywords()[1].getKeywords()).contains('Trecho Ferroviário')
    expect(identificationInfo.getDescriptiveKeywords()[1].getThesaurusName()).toBeDefined()
    expect(identificationInfo.getCitation()).toBeDefined()
    expect(identificationInfo.getCitation().getTitle()).toBe('NÃO EXCLUIR - perfl mgb 2.0 - Trecho Ferroviário 2021')
    expect(identificationInfo.getCitation().getISBN()).toBe('International Standard Book Number')
    expect(identificationInfo.getCitation().getISSN()).toBe('International Standard Serial Number')
    expect(identificationInfo.getCitation().getCitedResponsibleParties()[0].getOrganisationName()).toBe("Capacitação - Contato Principal")
    expect(identificationInfo.getCitation().getCitedResponsibleParties()[0].getRole()).toBe("owner")
    expect(identificationInfo.getCitation().getCitedResponsibleParties()[0].getContactInfo()).toBeDefined()
    expect(identificationInfo.getCitation().getDates()[0].getDate()).toBe("2022-06-03T12:00:00")
    expect(identificationInfo.getCitation().getDates()[0].getDateType()).toBe("creation")
})